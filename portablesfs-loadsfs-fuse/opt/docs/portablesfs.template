#!/bin/bash

export LD_LIBRARY_PATH=/opt/lib:/usr/local/lib

	if [ -z `which gsu` ]; then
if [ "`whoami`" != "root" ]; then
echo $USER > /tmp/sfs-portable-user
chmod 666 /tmp/sfs-portable-user
exec gksu ${0}
fi
	else
if [ "`whoami`" != "root" ]; then
echo $USER > /tmp/sfs-portable-user
chmod 666 /tmp/sfs-portable-user
exec gsu ${0}
fi
	fi

exitfn () {
rm -rf /.unionfs 2> /dev/null
rm -f /tmp/sfs-portable-user
bundle_deactivate
exit
}

trap "exitfn" 1 2 15           # Set up SIGINT trap to call function 'exitfn'.

if [ -f /mnt/live/tmp/modules ]; then
MNTPATH=/mnt/live/memory/images
NUM=`mount | grep $MNTPATH | wc -l`
POSITION="$((${NUM} + 1))"
else
MNTPATH=/live
NUM=`blkid -o list -c /dev/null | grep -P "squashfs" | grep "/live/\|(in use)" | wc -l`
POSITION="$((${NUM} + 1))"
fi

APP=$(readlink -e $0)
[ "$APP" ] || APP=$0
APPDIR=$(dirname "$APP")

check_bundle_defined()
{
  if [ ! $BUNDLE ]; then
    echo -e $Red"ERROR:"$Color_Off" Please define bundle name to de/activate"
    exit 1
  fi
}

get_bundle_load_positon()
{
  if [ ! $BUNDLE_POSITION ]; then
    POSITION="1"
  else
    POSITION=$(echo $BUNDLE_POSITION | sed 's|^--||g')
  fi
}

check_if_onaufs()
{
 APPDIR=$(dirname "$BUNDLE")
 ALINE=$(df -m "$APPDIR"|tail -n1| tr -s ' ')
 MYPLACE=$(echo $ALINE| cut -d' ' -f1)
 APPDEV=$(echo $MYPLACE| grep '^/dev/')
 
 if [ -z "$APPDEV" ]; then
yad --text " ERROR: Trying to activate on the virtual storage, \n but $BUNDLE must be placed on an actual storage. " --button="gtk-close:0"
exit 1
fi
}

check_if_exists()
{
  if [ ! -f $BUNDLE ]; then
    echo -e $Red"ERROR:"$Color_Off" Module '$BUNDLE' does not exist"
    exit 1
  fi
}

check_if_deactivated()
{
  if [ -d $MNTPATH/$BUNDLE ]; then
    echo -e $Red"ERROR:"$Color_Off" Module '$BUNDLE' is already activated"
yad --title="LoadModule" --center --width="400" --text=" Module '$BUNDLE' is already activated \n To activate in another mode (e.g. 'not overwrite' mode): \n Deactivate the module first. " --button="gtk-close:0"
    exit 1
  fi
}

check_if_activated()
{
  if [ ! -d $MNTPATH/$BUNDLE ]; then
    echo -e $Red"ERROR:"$Color_Off" Module '$BUNDLE' is not currently activated"
yad --title="LoadModule" --center --width="400" --text=" Module '$BUNDLE' is not currently activated " --button="gtk-close:0"
    exit 1
  fi
}

post_actions_check_if_needed()
{
  MODULES=$(ls $MNTPATH/$BUNDLE/lib/modules 2>/dev/null)
  ICONS=$(ls $MNTPATH/$BUNDLE/usr/share/icons/hicolor 2>/dev/null)
  DESKTOP=$(ls $MNTPATH/$BUNDLE/usr/share/applications 2>/dev/null)
  DESKTOP1=$(ls $MNTPATH/$BUNDLE/usr/local/share/applications 2>/dev/null)
  GSETTINGS=$(ls $MNTPATH/$BUNDLE/usr/share/glib-2.0/schemas 2>/dev/null)
  FONTS=$(ls $MNTPATH/$BUNDLE/usr/share/fonts/TTF 2>/dev/null)
  MIME=$(ls $MNTPATH/$BUNDLE/usr/share/mime/ 2>/dev/null)
}

post_actions_run_list()
{
  if [ "$MODULES" ]; then 
    echo -e $Green"ACTION:"$Color_Off" updating loadable kernel modules list"
    depmod -a
  fi
  if [ "$ICONS" ]; then 
    echo -e $Green"ACTION:"$Color_Off" rebuilding the gtk+ icon cache"
#    gtk-update-icon-cache --force /usr/share/icons/hicolor &>/dev/null 2>&1
    update-icon-caches /usr/share/icons/* &>/dev/null 2>&1
  fi
  if [ "$DESKTOP" ]; then
    echo -e $Green"ACTION:"$Color_Off" updating mimeinfo cache"
    update-desktop-database &>/dev/null 2>&1
    rm -r $HOME/.cache &>/dev/null 2>&1
  fi
  if [ "$DESKTOP1" ]; then
    echo -e $Green"ACTION:"$Color_Off" updating mimeinfo cache"
    update-desktop-database /usr/local/share/applications &>/dev/null 2>&1
    rm -r $HOME/.cache &>/dev/null 2>&1
  fi
  if [ "$GSETTINGS" ]; then
    echo -e $Green"ACTION:"$Color_Off" gsettings xml schema files"
    glib-compile-schemas /usr/share/glib-2.0/schemas &>/dev/null 2>&1
  fi
  if [ "$FONTS" ]; then
    echo -e $Green"ACTION:"$Color_Off" updating font cache"
    fc-cache -f -s > /dev/null
    mkfontscale /usr/share/fonts/TTF
    mkfontdir /usr/share/fonts/TTF
  fi
  if [ "$MIME" ]; then
    echo -e $Green"ACTION:"$Color_Off" updating mime cache"
    update-mime-database /usr/share/mime &>/dev/null 2>&1
  fi
}

bundle_activate()
{
  check_if_onaufs
  check_bundle_defined
  check_if_exists
  check_if_deactivated
  post_actions_check_if_needed
  # get_bundle_load_positon
  ### remove cache files, will be recreated further in script
  ICONCACHE=$(find $MNTPATH/$BUNDLE/usr/share/icons -type f -name icon-theme.cache)
  RMCACHE=$(echo $ICONCACHE | sed "s|$MNTPATH/$BUNDLE||g")
  rm -f $RMCACHE
  if [ "$MIME" ]; then
  rm -f /usr/share/mime/mime.cache 2>/dev/null
  fi
  mkdir $MNTPATH/$BUNDLE
  mount -o loop $BUNDLE $MNTPATH/$BUNDLE
  mount -n -o remount,add:$POSITION:$MNTPATH/$BUNDLE=rr aufs /
  if [ $? -eq 0 ]; then
    echo -e $Green"SUCCESS:"$Color_Off" Module '$BUNDLE' activated"

    post_actions_run_list
#    update-menus
# Ugly workaround for OpenBox version to update the menu:
# Create a .desktop in /usr/share/applications with random name and remove it directly
#    FILE=$RANDOM
#    touch /usr/share/applications/$FILE.desktop && rm -f /usr/share/applications/$FILE.desktop
  else
    echo -e $Red"ERROR:"$Color_Off" Module '$BUNDLE' activate failed"
yad --title="LoadModule" --center --width="400" --text=" ERROR: Module '$BUNDLE' activate failed " --button="gtk-close:0" &
    umount $MNTPATH/$BUNDLE
    rmdir $MNTPATH/$BUNDLE
  fi
}

bundle_deactivate()
{
  check_bundle_defined
  check_if_activated
  post_actions_check_if_needed
  mount -t squashfs -n -o remount,del:$MNTPATH/$BUNDLE aufs /
  umount $MNTPATH/$BUNDLE
  rmdir $MNTPATH/$BUNDLE
  if [ $? -eq 0 ]; then
    echo -e $Green"SUCCESS:"$Color_Off" Module '$BUNDLE' deactivated"
    post_actions_run_list
#    update-menus
# Ugly workaround for OpenBox version to update the menu:
# Create a .desktop in /usr/share/applications with random name and remove it directly
#    FILE=$RANDOM
#    touch /usr/share/applications/$FILE.desktop && rm -f /usr/share/applications/$FILE.desktop
    exit 0
  else
# Force unmount
echo "Unmounting failed, so lets find out (by 'aubusy') which process is keeping it from unloading and kill it..."
while read line; do
PID=$(echo "$line" | awk '{ print $1 }' 2> /dev/null)
PROCESS=$(ps -eo pid,cmd | grep $PID  | grep -v "grep" | awk '{ print $2 }')
# Do not kill X
[ "$PROCESS" = "/usr/bin/X" ] && break
kill $(echo "$line" | awk '{ print $1 }') 2> /dev/null 
echo "$line" | awk '{ print $1 }'
sleep 1
done <<< "$(aubusy -v / $MNTPATH/$BUNDLE)"

echo
echo "Ok, let's try unloading again now..."
  mount -t squashfs -n -o remount,del:$MNTPATH/$BUNDLE aufs /
  umount $MNTPATH/$BUNDLE
  rmdir $MNTPATH/$BUNDLE
	if [ $? -ne 0 ]; then
yad --title="LoadModule" --center --width="400" --text=" ERROR: Module '$BUNDLE' deactivate failed " --button="gtk-close:0" &
exit 0
	else
    post_actions_run_list
#    update-menus
# Ugly workaround for OpenBox version to update the menu:
# Create a .desktop in /usr/share/applications with random name and remove it directly
#    FILE=$RANDOM
#    touch /usr/share/applications/$FILE.desktop && rm -f /usr/share/applications/$FILE.desktop
echo "Module '$BUNDLE' deactivated"
    exit 0
	fi
  fi
}

setup_menu() {
# Setup directory for .desktop lauchers (to read by yad --icons) and copy them
mkdir /.unionfs
cp -a "$MNTPATH/$BUNDLE"/usr/share/applications/*.desktop /.unionfs/

# Remove extension (if any) from Icon= entry (otherwise yad-menu shows no icon) 
while read line; do
ICON=$(grep -m 1 -r Icon= "$line" | cut -d "=" -f 2 | cut -d % -f 1)
FULL=`echo "$ICON" | grep '/' 2> /dev/null`
if [ -z "$FULL" ]; then
BASE=`echo ${ICON%.*}`
BASENAME="$(basename "$line")"
sed -i 's#Icon=.*#Icon='"$BASE"'#g' "/.unionfs/$BASENAME"
fi
APPLINE=$(grep 'Type=Application' "$line")
if [ -z "$APPLINE" ]; then
BASENAME="$(basename "$line")"
echo 'Type=Application' >> "/.unionfs/$BASENAME"
fi
done <<< "$(ls /.unionfs/*.desktop)"

# Create Xterm.desktop in /.unionfs
echo '[Desktop Entry]
Version=1.0
Type=Application
Name=XTerm
Comment=standard terminal emulator for the X window system
Exec=xterm
Icon=xterm-color_48x48
Path=
Terminal=false
StartupNotify=false
' > /.unionfs/Xterm.desktop
}

