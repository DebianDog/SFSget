#!/bin/sh
### search for a squashfs module and download ###
 
.  /usr/local/sfsget/script/functions 

RESTART=$0
TITLE="SFS Downloader"
TEXT=" Search the repository for a .squashfs module "
TEXT1="             <b>Downloads</b> in progress:"        # dialog text
ICON="browserdload"                     # window icon (appears in launcher)
IMAGE="browserdload"

## search gui ##
GUI=$(yad --center --title="$TITLE" --text="$TEXT" --form \
--field="Search" \
--button="gtk-go-back:1"  --button="gtk-ok:0" )
button=$?
case $button in

1) 
  echo "Exiting" && exit  
;; 
 
0)
## if no search string restart ##
 search=` echo $GUI | cut -d '|' -f1 `
 if [[ ! -n "$search" ]]; then 
 echo "no search string entered" && $RESTART && exit
 fi

## display searched packages ##

export HOSTDIR="https://github.com/DebianDog/SFSget_Extramodules-Jessie/releases/tag/Desktop/"
Desktop=$(while read line; do echo $line; done <<< "$(elinks -dump "$HOSTDIR" | grep 'releases/download/Desktop' | awk '/https/{print $2}')")
Desktop=$(echo $Desktop | tr ' ' '\n' | rev | sed 's|/| |' | rev | sort -u)
echo "$Desktop" > /tmp/sfsget_search

export HOSTDIR="https://github.com/DebianDog/SFSget_Extramodules-Jessie/releases/tag/Document/"
Document=$(while read line; do echo $line; done <<< "$(elinks -dump "$HOSTDIR" | grep 'releases/download/Document' | awk '/https/{print $2}')")
Document=$(echo $Document | tr ' ' '\n' | rev | sed 's|/| |' | rev | sort -u)
echo "$Document" >> /tmp/sfsget_search

export HOSTDIR="https://github.com/DebianDog/SFSget_Extramodules-Jessie/releases/tag/Filesystem/"
Filesystem=$(while read line; do echo $line; done <<< "$(elinks -dump "$HOSTDIR" | grep 'releases/download/Filesystem' | awk '/https/{print $2}')")
Filesystem=$(echo $Filesystem | tr ' ' '\n' | rev | sed 's|/| |' | rev | sort -u)
echo "$Filesystem" >> /tmp/sfsget_search

export HOSTDIR="https://github.com/DebianDog/SFSget_Extramodules-Jessie/releases/tag/Fun/"
Fun=$(while read line; do echo $line; done <<< "$(elinks -dump "$HOSTDIR" | grep 'releases/download/Fun' | awk '/https/{print $2}')")
Fun=$(echo $Fun | tr ' ' '\n' | rev | sed 's|/| |' | rev | sort -u)
echo "$Fun" >> /tmp/sfsget_search

export HOSTDIR="https://github.com/DebianDog/SFSget_Extramodules-Jessie/releases/tag/Graphics/"
Graphics=$(while read line; do echo $line; done <<< "$(elinks -dump "$HOSTDIR" | grep 'releases/download/Graphics' | awk '/https/{print $2}')")
Graphics=$(echo $Graphics | tr ' ' '\n' | rev | sed 's|/| |' | rev | sort -u)
echo "$Graphics" >> /tmp/sfsget_search

export HOSTDIR="https://github.com/DebianDog/SFSget_Extramodules-Jessie/releases/tag/Internet/"
Internet=$(while read line; do echo $line; done <<< "$(elinks -dump "$HOSTDIR" | grep 'releases/download/Internet' | awk '/https/{print $2}')")
Internet=$(echo $Internet | tr ' ' '\n' | rev | sed 's|/| |' | rev | sort -u)
echo "$Internet" >> /tmp/sfsget_search

export HOSTDIR="https://github.com/DebianDog/SFSget_Extramodules-Jessie/releases/tag/Multimedia/"
Multimedia=$(while read line; do echo $line; done <<< "$(elinks -dump "$HOSTDIR" | grep 'releases/download/Multimedia' | awk '/https/{print $2}')")
Multimedia=$(echo $Multimedia | tr ' ' '\n' | rev | sed 's|/| |' | rev | sort -u)
echo "$Multimedia" >> /tmp/sfsget_search

export HOSTDIR="https://github.com/DebianDog/SFSget_Extramodules-Jessie/releases/tag/Network/"
Network=$(while read line; do echo $line; done <<< "$(elinks -dump "$HOSTDIR" | grep 'releases/download/Network' | awk '/https/{print $2}')")
Network=$(echo $Network | tr ' ' '\n' | rev | sed 's|/| |' | rev | sort -u)
echo "$Network" >> /tmp/sfsget_search

export HOSTDIR="https://github.com/DebianDog/SFSget_Extramodules-Jessie/releases/tag/System/"
System=$(while read line; do echo $line; done <<< "$(elinks -dump "$HOSTDIR" | grep 'releases/download/System' | awk '/https/{print $2}')")
System=$(echo $System | tr ' ' '\n' | rev | sed 's|/| |' | rev | sort -u)
echo "$System" >> /tmp/sfsget_search

export HOSTDIR="https://github.com/DebianDog/SFSget_Extramodules-Jessie/releases/tag/Utility/"
Utility=$(while read line; do echo $line; done <<< "$(elinks -dump "$HOSTDIR" | grep 'releases/download/Utility' | awk '/https/{print $2}')")
Utility=$(echo $Utility | tr ' ' '\n' | rev | sed 's|/| |' | rev | sort -u)
echo "$Utility" >> /tmp/sfsget_search

# all items to search for in /tmp/sfsget_search
ALL=$(while read line; do echo $line |grep -i "$search"; done <<< "$(cat /tmp/sfsget_search)")

GUI1=$(yad --separator=" " --image="application-x-squashfs" --image-on-top --center --height 500 --width="500" --list --title="Download SFS module" --multiple --text=" Search results for '$search' \n Download SFS modules (.squashfs or .sfs). \n Select (multiple) items to download." --column " Available Modules" $ALL --column Name --hide-column=1 --button="gtk-go-back:1"  --button="gtk-ok:0")
button1=$?

case $button1 in

1) 
  echo "Exiting" && exit  
;; 

0)
## if package selected then download - else restart ##
 if [[ -n "$GUI1" ]]; then
if [ ! -w $BASE ]; then
echo "It seems that $BASE is on read-only media, booting from CD maybe?"
BASE=/root
else
# Select folder to download to:
SAVEFOLDER=$(yad  --center --image="application-x-squashfs" --image-on-top --title="Select folder to download SFS modules" --file --filename "$BASE" --directory --height=600 --width=800 --text=" Select folder to download SFS modules to" )
ret=$?
[[ $ret -ne 0 ]] && exit 1
fi

URILIST="`echo "$GUI1" | rev | sed 's| |/|2g' | rev | tr '\n' ' '`"

# Select folder to download to:
#SAVEFOLDER=$(yad  --center --image="browser-dload" --image-on-top --title="Select target folder" --file --height=600 --width=800 --text=" Select target folder for downloads" )
#ret=$?
#[[ $ret -ne 0 ]] && exit 1

MAXDLS="5" # set maximum number of simultaneous downloads

# download file and extract progress, speed and ETA from wget
# we use sed regex for this
# source: http://ubuntuforums.org/showthread.php?t=306515&page=2&p=7455412#post7455412
# modified to work with different locales and decimal point conventions
download(){
    cd "$SAVEFOLDER"
    wget --no-check-certificate "$1" 2>&1 | sed -u \
    "s/.* \([0-9]\+%\)\ \+\([0-9,.]\+.\) \(.*\)/$2:\1\n$2:# Downloading at \2\/s, ETA \3/"
    RET_WGET="${PIPESTATUS[0]}"             # get return code of wget
    if [[ "$RET_WGET" = 0 ]]                # check return code for errors
      then
          echo "$2:100%"
          echo "$2:#Download completed."
      else
          echo "$2:#Download error."
    fi
}


# compose list of bars for yad
for URI in $URILIST; do                     # iterate through all URIs
    FILENAME="${URI##*/}"                   # extract last field of URI as filename
    YADBARS="$YADBARS --bar=$FILENAME:NORM" # add filename to the list of URIs
done

IFS=" "
COUNTER="1"
DYNAMIC_COUNTER="1"

# main
# iterate through all URIs, download them in the background and 
# pipe all output simultaneously to yad
# source: http://pastebin.com/yBL2wjaY

for URI in $URILIST; do
    if [[ "$DYNAMIC_COUNTER" = "$MAXDLS" ]] # only download n files at a time
      then
          download "$URI" "$COUNTER"        # if limit reached wait until wget complete
          DYNAMIC_COUNTER="1"               # before proceeding (by not sending download() to bg)
      else
          download "$URI" "$COUNTER" &      # pass URI and URI number to download()
          DYNAMIC_COUNTER="$[$DYNAMIC_COUNTER+1]"
    fi
    COUNTER="$[$COUNTER+1]"                 # increment counter
done | yad --center --multi-progress --on-top --auto-kill $YADBARS --title "$TITLE" \
--text "$TEXT1" --window-icon "$ICON" --image "$IMAGE"

# launch yad multi progress-bar window

  else
  echo "No package selected" && $RESTART && exit
 fi
;;
esac
esac






